install.packages(c("nnet", "NeuralNetTools", "neuralnet", "neural"))
setwd('C:\Users\THIDARMOE\Desktop\Concrete')
?setwd
setwd("C:\Users\THIDARMOE\Desktop\Concrete")
setwd("C:/Users/THIDARMOE/Desktop/Concrete")
library(neuralnet)
library(lattice)
library(car)
library(GGally)
concrete <- read.csv("concrete.csv")
str(concrete)
concrete <- read.csv("concrete.csv")
concrete <- read.csv("concrete.csv")
?str
str(concrete)
summary(concrete)
?lapply
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
concrete_norm <- as.data.frame(lapply(concrete, normalize))
summary(concrete_norm)
?par
?hist
?lines
?rug
?qqPlot
?qqplot
par(mfrow=c(1,2)) # get two graphs side by side
hist(concrete_norm$strength, prob=T, xlab='',
main='Histogram of strength value')
lines(density(concrete_norm$strength,na.rm=T))
rug(jitter(concrete_norm$strength))
qqPlot(concrete_norm$strength,main='Normal QQ plot of strength')
par(mfrow=c(1,2))
hist(concrete_norm$strength, prob=T, xlab='',
main='Histogram of strength value')
hist(concrete_norm$Concrete.compressive.strength.MPa..megapascals.., prob=T, xlab='',
main='Histogram of strength value')
lines(density(concrete_norm$Concrete.compressive.strength.MPa..megapascals..,na.rm=T))
rug(jitter(concrete_norm$Concrete.compressive.strength.MPa..megapascals..))
qqPlot(concrete_norm$Concrete.compressive.strength.MPa..megapascals..,main='Normal QQ plot of strength')
qqplot(concrete_norm$Concrete.compressive.strength.MPa..megapascals..,main='Normal QQ plot of strength')
?qqplot
qqnorm(concrete_norm$Concrete.compressive.strength.MPa..megapascals..,main='Normal QQ plot of strength')
par(mfrow=c(1,1))
?ggpairs
concrete_train <- concrete_norm[1:773, ]
concrete_test <- concrete_norm[774:1030, ]
set.seed(1)
concrete_model <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train)
plot(concrete_model)
concrete <- read.csv("concrete.csv")
str(concrete)
summary(concrete)
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
concrete_norm <- as.data.frame(lapply(concrete, normalize))
summary(concrete_norm)
par(mfrow=c(1,2)) # get two graphs side by side
hist(concrete_norm$strength, prob=T, xlab='',
main='Histogram of strength value')
lines(density(concrete_norm$strength,na.rm=T))
rug(jitter(concrete_norm$strength))
qqnorm(concrete_norm$strength,main='Normal QQ plot of strength')
concrete_train <- concrete_norm[1:773, ]
concrete_test <- concrete_norm[774:1030, ]
set.seed(1)
concrete_model <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train)
plot(concrete_model)
?neuralnet
plot.nn(concrete_model)
model_results <- compute(concrete_model, concrete_test[1:8])
predicted_strength <- model_results$net.result
head(predicted_strength)
cor(predicted_strength, concrete_test$strength)[,1]
set.seed(3)
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train,
hidden = 5)
plot(concrete_model2)
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)[,1]
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(net <- neuralnet(AND+OR~Var1+Var2+Var3,  binary.data, hidden=0,
rep=10, err.fct="ce", linear.output=FALSE))
data(infert, package="datasets")
print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert,
err.fct="ce", linear.output=FALSE, likelihood=TRUE))
cor(predicted_strength2, concrete_test$strength)
concrete_model3 <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train, hidden = 7)
plot(concrete_model3, rep = "best")
model_results3 <- compute(concrete_model3, concrete_test[1:8])
predicted_strength3 <- model_results3$net.result
cor(predicted_strength3, concrete_test$strength)
cor(predicted_strength2, concrete_test$strength)
concrete_model4 <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train, hidden = 6)
model_results4 <- compute(concrete_model4, concrete_test[1:8])
predicted_strength4 <- model_results4$net.result
cor(predicted_strength4, concrete_test$strength)
plot(concrete_model4, rep = "best")
plot(concrete_model2, rep = "best")
q()
q()
